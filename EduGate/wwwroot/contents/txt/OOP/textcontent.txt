<div class="guide-section">
    <h2 class="mb-3" style="color:#023047;">C# Object-Oriented Programming (OOP) - Quick Guide</h2>

    <p>OOP stands for Object-Oriented Programming. It is a programming paradigm based on the concept of "objects".</p>

    <h4 class="mt-4" style="color:#219EBC;">1. Encapsulation</h4>
    <p>Encapsulation is the practice of keeping fields within a class private, then providing access to them via public methods (getters and setters).</p>
    <pre style="background-color:#f8f9fa; padding:10px; border-radius:5px;"><code>class Person
{
    private string name;

    public string GetName()
    {
        return name;
    }

    public void SetName(string value)
    {
        name = value;
    }
}</code></pre>
    <ul>
        <li>Protects internal state</li>
        <li>Only allows controlled access</li>
    </ul>

    <h4 class="mt-4" style="color:#219EBC;">2. Inheritance</h4>
    <p>Inheritance allows one class to inherit fields and methods from another class.</p>
    <pre style="background-color:#f8f9fa; padding:10px; border-radius:5px;"><code>class Animal
{
    public void Eat()
    {
        Console.WriteLine("Eating...");
    }
}

class Dog : Animal
{
    public void Bark()
    {
        Console.WriteLine("Barking...");
    }
}</code></pre>
    <ul>
        <li><code>Dog</code> inherits from <code>Animal</code></li>
        <li><code>Dog</code> can use <code>Eat()</code> from <code>Animal</code></li>
    </ul>

    <h4 class="mt-4" style="color:#219EBC;">3. Polymorphism</h4>
    <p>Polymorphism allows methods to behave differently based on the object that is calling them.</p>
    <pre style="background-color:#f8f9fa; padding:10px; border-radius:5px;"><code>class Animal
{
    public virtual void Speak()
    {
        Console.WriteLine("Animal sound");
    }
}

class Cat : Animal
{
    public override void Speak()
    {
        Console.WriteLine("Meow");
    }
}</code></pre>
    <ul>
        <li>Method behavior changes at runtime</li>
        <li>Supports method overriding</li>
    </ul>

    <h4 class="mt-4" style="color:#219EBC;">4. Abstraction</h4>
    <p>Abstraction hides complex implementation details and shows only essential features.</p>
    <pre style="background-color:#f8f9fa; padding:10px; border-radius:5px;"><code>abstract class Shape
{
    public abstract void Draw();
}

class Circle : Shape
{
    public override void Draw()
    {
        Console.WriteLine("Drawing a circle");
    }
}</code></pre>
    <ul>
        <li><code>Shape</code> defines a contract with <code>Draw()</code></li>
        <li><code>Circle</code> provides specific implementation</li>
    </ul>
</div>
