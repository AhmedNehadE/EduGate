@model CourseEditViewModel
@{
    ViewData["Title"] = "Edit Course";
}

<div class="container my-4">
    <div class="row mb-4">
        <div class="col">
            <h1>Edit Course: @Model.Title</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-controller="Account" asp-action="Dashboard">Teacher Dashboard</a></li>
                    <li class="breadcrumb-item active">Edit Course</li>
                </ol>
            </nav>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">Course Details</h5>
                </div>
                <div class="card-body">
                    <form asp-action="UpdateCourse" method="post" enctype="multipart/form-data">
                        <input type="hidden" asp-for="CourseId" />

                        <div class="mb-3">
                            <label asp-for="Title" class="form-label">Course Title</label>
                            <input asp-for="Title" class="form-control" required />
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Category" class="form-label">Category</label>
                            <input asp-for="Category" class="form-control" required />
                            <span asp-validation-for="Category" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Description" class="form-label">Description</label>
                            <textarea asp-for="Description" class="form-control" rows="5" required></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="ImageFile" class="form-label">Course Image</label>
                            @if (!string.IsNullOrEmpty(Model.ImageUrl))
                            {
                                <div class="mb-2">
                                    <img src="@Model.ImageUrl.Replace("~/", "/")" alt="Course Image" class="img-thumbnail" style="max-height: 150px;" />
                                </div>
                            }
                            <input asp-for="ImageFile" class="form-control" type="file" accept="image/*" />
                            <small class="form-text text-muted">Upload a new image to replace the current one.</small>
                        </div>

                        <button type="submit" class="btn btn-primary">Update Course</button>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Course Modules</h5>
                    <a asp-action="CreateModule" asp-route-courseId="@Model.CourseId" class="btn btn-sm btn-success">
                        <i class="bi bi-plus-circle"></i> Add Module
                    </a>
                </div>
                <div class="card-body">
                    @if (!Model.Modules.Any())
                    {
                        <div class="alert alert-info">
                            This course has no modules yet. Start by adding a module.
                        </div>
                    }
                    else
                    {
                        <div class="list-group" id="module-list">
                            @foreach (var module in Model.Modules.OrderBy(m => m.Order))
                            {
                                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center"
                                     data-module-id="@module.Id">
                                    <div>
                                        <h6 class="mb-1">@module.Title</h6>
                                        <p class="mb-1 text-muted small">@(module.Contents?.Count ?? 0) content items</p>
                                    </div>
                                    <div class="d-flex">
                                        <a asp-action="EditModule" asp-route-id="@module.Id" class="btn btn-sm btn-outline-primary me-2">
                                            <i class="bi bi-pencil"></i> Edit
                                        </a>
                                        <form asp-action="DeleteModule" method="post" onsubmit="return confirm('Are you sure you want to delete this module? This will delete all content within it.');">
                                            <input type="hidden" name="moduleId" value="@module.Id" />
                                            <input type="hidden" name="courseId" value="@Model.CourseId" />
                                            <button type="submit" class="btn btn-sm btn-outline-danger">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Enable drag and drop reordering of modules using SortableJS
        document.addEventListener('DOMContentLoaded', function() {
            const moduleList = document.getElementById('module-list');
            if (moduleList) {
                new Sortable(moduleList, {
                    animation: 150,
                    ghostClass: 'bg-light',
                    onEnd: function() {
                        // Get the new module order
                        const moduleIds = Array.from(moduleList.children).map(item =>
                            parseInt(item.getAttribute('data-module-id'))
                        );

                        // Send the new order to the server
                        fetch('@Url.Action("ReorderModules", "Course")', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({ moduleIds: moduleIds })
                        })
                        .then(response => {
                            if (!response.ok) {
                                console.error('Failed to reorder modules');
                            }
                        })
                        .catch(error => {
                            console.error('Error reordering modules:', error);
                        });
                    }
                });
            }
        });
    </script>
}