// <auto-generated />
using System;
using EduGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduGate.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduGate.Models.ContentProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ContentProgresses");
                });

            modelBuilder.Entity("EduGate.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Programming",
                            Description = "Learn the fundamentals of C# programming, including syntax, OOP principles, and basic applications.",
                            ImageUrl = "img/csharp.jpg",
                            TeacherId = 1,
                            Title = "Introduction to C#",
                            Views = 1500
                        },
                        new
                        {
                            Id = 2,
                            Category = "Programming",
                            Description = "Deep dive into Python's advanced features like decorators, generators, and data analysis libraries.",
                            ImageUrl = "img/python.png",
                            TeacherId = 1,
                            Title = "Advanced Python",
                            Views = 1200
                        },
                        new
                        {
                            Id = 3,
                            Category = "Programming",
                            Description = "An entry-level course covering the basics of Java programming and object-oriented design.",
                            ImageUrl = "img/java.jpeg",
                            TeacherId = 2,
                            Title = "Java for Beginners",
                            Views = 1100
                        },
                        new
                        {
                            Id = 4,
                            Category = "AI & Data Science",
                            Description = "Explore the basics of machine learning including supervised learning, classification, and regression.",
                            ImageUrl = "img/machine learning.jpg",
                            TeacherId = 2,
                            Title = "Machine Learning Basics",
                            Views = 1800
                        },
                        new
                        {
                            Id = 5,
                            Category = "AI & Data Science",
                            Description = "Build deep learning models using TensorFlow, focusing on neural networks and CNNs.",
                            ImageUrl = "img/tensorflow.jpg",
                            TeacherId = 3,
                            Title = "Deep Learning with TensorFlow",
                            Views = 950
                        },
                        new
                        {
                            Id = 6,
                            Category = "AI & Data Science",
                            Description = "Analyze, visualize, and manipulate data using Python's powerful Pandas library.",
                            ImageUrl = "img/pandas.png",
                            TeacherId = 3,
                            Title = "Data Analysis with Pandas",
                            Views = 700
                        },
                        new
                        {
                            Id = 7,
                            Category = "Web Development",
                            Description = "Build modern web applications using ASP.NET Core MVC and Razor Pages.",
                            ImageUrl = "img/aspnetcore.jpg",
                            TeacherId = 2,
                            Title = "Web Development with ASP.NET Core",
                            Views = 900
                        },
                        new
                        {
                            Id = 8,
                            Category = "Web Development",
                            Description = "Master React fundamentals, component-based architecture, hooks, and state management.",
                            ImageUrl = "img/react.jpg",
                            TeacherId = 1,
                            Title = "Frontend Development with React",
                            Views = 1300
                        },
                        new
                        {
                            Id = 9,
                            Category = "Web Development",
                            Description = "Start your web development journey with the basics of HTML and CSS.",
                            ImageUrl = "img/htmlcss.jpg",
                            TeacherId = 1,
                            Title = "HTML & CSS for Beginners",
                            Views = 800
                        });
                });

            modelBuilder.Entity("EduGate.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Description = "Introduction to programming basics",
                            Order = 1,
                            Title = "Module 1: Getting Started"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Description = "Machine learning core concepts",
                            Order = 1,
                            Title = "Module 1: ML Fundamentals"
                        });
                });

            modelBuilder.Entity("EduGate.Models.ModuleContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleContents", (string)null);

                    b.HasDiscriminator<string>("ContentType").HasValue("ModuleContent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EduGate.Models.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorrectOptionIndex")
                        .HasColumnType("int");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("QuizContentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizContentId");

                    b.ToTable("QuizQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrectOptionIndex = 0,
                            Options = "A container for data;A type of loop;A function;None of the above",
                            Points = 1,
                            Question = "What is a variable?",
                            QuizContentId = 1
                        },
                        new
                        {
                            Id = 2,
                            CorrectOptionIndex = 1,
                            Options = "Model too simple;Model too complex;Model has low accuracy;Model has high bias",
                            Points = 1,
                            Question = "What is overfitting in machine learning?",
                            QuizContentId = 2
                        });
                });

            modelBuilder.Entity("EduGate.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "studentA@edugate.com",
                            Name = "Student A",
                            Password = "password789"
                        },
                        new
                        {
                            Id = 2,
                            Email = "studentB@edugate.com",
                            Name = "Student B",
                            Password = "password012"
                        });
                });

            modelBuilder.Entity("EduGate.Models.StudentCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("EduGate.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@edugate.com",
                            Name = "John Doe",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@edugate.com",
                            Name = "Jane Smith",
                            Password = "password456"
                        },
                        new
                        {
                            Id = 3,
                            Email = "ray.hansen@edugate.com",
                            Name = "Ray Hansen",
                            Password = "password456"
                        });
                });

            modelBuilder.Entity("EduGate.Models.QuizContent", b =>
                {
                    b.HasBaseType("EduGate.Models.ModuleContent");

                    b.Property<int?>("MaxAttempts")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Quiz");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentType = "Quiz",
                            ModuleId = 1,
                            Order = 2,
                            ShortDescription = "Test your knowledge of programming fundamentals",
                            Title = "Programming Basics Quiz",
                            PassingScore = 70
                        },
                        new
                        {
                            Id = 2,
                            ContentType = "Quiz",
                            ModuleId = 2,
                            Order = 2,
                            ShortDescription = "Test your understanding of ML concepts",
                            Title = "Machine Learning Concepts Quiz",
                            PassingScore = 70
                        });
                });

            modelBuilder.Entity("EduGate.Models.TextContent", b =>
                {
                    b.HasBaseType("EduGate.Models.ModuleContent");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Text");
                });

            modelBuilder.Entity("EduGate.Models.VideoContent", b =>
                {
                    b.HasBaseType("EduGate.Models.ModuleContent");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<string>("VideoLocation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasDiscriminator().HasValue("Video");
                });

            modelBuilder.Entity("EduGate.Models.ContentProgress", b =>
                {
                    b.HasOne("EduGate.Models.ModuleContent", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduGate.Models.Student", "Student")
                        .WithMany("ContentProgresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduGate.Models.Course", b =>
                {
                    b.HasOne("EduGate.Models.Teacher", "Teacher")
                        .WithMany("UploadedCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EduGate.Models.Module", b =>
                {
                    b.HasOne("EduGate.Models.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduGate.Models.ModuleContent", b =>
                {
                    b.HasOne("EduGate.Models.Module", "Module")
                        .WithMany("Contents")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("EduGate.Models.QuizQuestion", b =>
                {
                    b.HasOne("EduGate.Models.QuizContent", "QuizContent")
                        .WithMany("Questions")
                        .HasForeignKey("QuizContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizContent");
                });

            modelBuilder.Entity("EduGate.Models.StudentCourse", b =>
                {
                    b.HasOne("EduGate.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduGate.Models.Student", "Student")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduGate.Models.Course", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("EduGate.Models.Module", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("EduGate.Models.Student", b =>
                {
                    b.Navigation("ContentProgresses");

                    b.Navigation("EnrolledCourses");
                });

            modelBuilder.Entity("EduGate.Models.Teacher", b =>
                {
                    b.Navigation("UploadedCourses");
                });

            modelBuilder.Entity("EduGate.Models.QuizContent", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
