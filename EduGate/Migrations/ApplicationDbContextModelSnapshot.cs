// <auto-generated />
using System;
using EduGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduGate.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduGate.Models.ContentProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ContentProgresses");
                });

            modelBuilder.Entity("EduGate.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Programming",
                            Description = "Learn the fundamentals of C# programming, including syntax, OOP principles, and basic applications.",
                            ImageUrl = "~/img/csharp.jpg",
                            TeacherId = 1,
                            Title = "Introduction to C#",
                            Views = 1500
                        },
                        new
                        {
                            Id = 2,
                            Category = "Programming",
                            Description = "Deep dive into Python's advanced features like decorators, generators, and data analysis libraries.",
                            ImageUrl = "~/img/python.png",
                            TeacherId = 1,
                            Title = "Advanced Python",
                            Views = 1200
                        },
                        new
                        {
                            Id = 3,
                            Category = "Programming",
                            Description = "An entry-level course covering the basics of Java programming and object-oriented design.",
                            ImageUrl = "~/img/java.jpeg",
                            TeacherId = 2,
                            Title = "Java for Beginners",
                            Views = 1100
                        },
                        new
                        {
                            Id = 4,
                            Category = "Data Science",
                            Description = "Explore the basics of machine learning including supervised learning, classification, and regression.",
                            ImageUrl = "~/img/machine learning.jpg",
                            TeacherId = 2,
                            Title = "Machine Learning Basics",
                            Views = 1800
                        },
                        new
                        {
                            Id = 5,
                            Category = "Data Science",
                            Description = "Build deep learning models using TensorFlow, focusing on neural networks and CNNs.",
                            ImageUrl = "~/img/tensorflow.jpg",
                            TeacherId = 3,
                            Title = "Deep Learning with TensorFlow",
                            Views = 950
                        },
                        new
                        {
                            Id = 6,
                            Category = "Data Science",
                            Description = "Analyze, visualize, and manipulate data using Python's powerful Pandas library.",
                            ImageUrl = "~/img/pandas.png",
                            TeacherId = 3,
                            Title = "Data Analysis with Pandas",
                            Views = 700
                        },
                        new
                        {
                            Id = 7,
                            Category = "Web Development",
                            Description = "Build modern web applications using ASP.NET Core MVC and Razor Pages.",
                            ImageUrl = "~/img/aspnetcore.jpg",
                            TeacherId = 2,
                            Title = "Web Development with ASP.NET Core",
                            Views = 900
                        },
                        new
                        {
                            Id = 8,
                            Category = "Web Development",
                            Description = "Master React fundamentals, component-based architecture, hooks, and state management.",
                            ImageUrl = "~/img/react.jpg",
                            TeacherId = 1,
                            Title = "Frontend Development with React",
                            Views = 1300
                        },
                        new
                        {
                            Id = 9,
                            Category = "Web Development",
                            Description = "Start your web development journey with the basics of HTML and CSS.",
                            ImageUrl = "~/img/htmlcss.jpg",
                            TeacherId = 1,
                            Title = "HTML & CSS for Beginners",
                            Views = 800
                        });
                });

            modelBuilder.Entity("EduGate.Models.CourseReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseReviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "This course exceeded my expectations! The content was well-structured and the instructor explained complex concepts in a way that was easy to understand.",
                            CourseId = 1,
                            CreatedDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stars = 5,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Great course overall. Some sections could have more depth, but I learned a lot and would recommend it to others interested in this topic.",
                            CourseId = 1,
                            CreatedDate = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stars = 4,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "The instructor's approach to teaching Python's advanced concepts made them much easier to grasp. Highly recommend!",
                            CourseId = 2,
                            CreatedDate = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stars = 5,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Solid introduction to machine learning concepts, though I would have appreciated more practical examples.",
                            CourseId = 4,
                            CreatedDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stars = 3,
                            StudentId = 2
                        });
                });

            modelBuilder.Entity("EduGate.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 3,
                            Description = "Learn the fundamentals of programming and how to begin your journey with Java.",
                            Order = 1,
                            Title = "Module 1: Getting Started"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Description = "Discover the core concepts and principles of machine learning.",
                            Order = 1,
                            Title = "Module 1: ML Fundamentals"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            Description = "Understand how variables work in C#, their types, and how to use them effectively.",
                            Order = 1,
                            Title = "Module 1: Variables"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 1,
                            Description = "Learn how to use conditional logic in C# using if, else if, and else statements.",
                            Order = 2,
                            Title = "Module 2: If condition"
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 1,
                            Description = "Explore how to use for loops to repeat actions in C# efficiently.",
                            Order = 3,
                            Title = "Module 3: For loop"
                        });
                });

            modelBuilder.Entity("EduGate.Models.ModuleContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleContents", (string)null);

                    b.HasDiscriminator<string>("ContentType").HasValue("ModuleContent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EduGate.Models.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorrectOptionIndex")
                        .HasColumnType("int");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("QuizContentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizContentId");

                    b.ToTable("QuizQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrectOptionIndex = 0,
                            Options = "A container for data;A type of loop;A function;None of the above",
                            Points = 1,
                            Question = "What is a variable?",
                            QuizContentId = 7
                        },
                        new
                        {
                            Id = 2,
                            CorrectOptionIndex = 1,
                            Options = "Model too simple;Model too complex;Model has low accuracy;Model has high bias",
                            Points = 1,
                            Question = "What is overfitting in machine learning?",
                            QuizContentId = 8
                        },
                        new
                        {
                            Id = 3,
                            CorrectOptionIndex = 2,
                            Options = "int = age 25;age int = 25;int age = 25;int: age = 25",
                            Points = 1,
                            Question = "Which of the following is a correct variable declaration in C#?",
                            QuizContentId = 9
                        },
                        new
                        {
                            Id = 4,
                            CorrectOptionIndex = 1,
                            Options = "int;bool;string;char",
                            Points = 1,
                            Question = "Which type is used to store a true or false value in C#?",
                            QuizContentId = 9
                        },
                        new
                        {
                            Id = 5,
                            CorrectOptionIndex = 3,
                            Options = "Declares a number;Declares a boolean;Declares a character;Declares a text variable",
                            Points = 1,
                            Question = "What does 'string name = \"Alice\";' do?",
                            QuizContentId = 9
                        },
                        new
                        {
                            Id = 6,
                            CorrectOptionIndex = 2,
                            Options = "for;switch;if;loop",
                            Points = 1,
                            Question = "Which keyword is used for checking a condition in C#?",
                            QuizContentId = 10
                        },
                        new
                        {
                            Id = 7,
                            CorrectOptionIndex = 1,
                            Options = "Adult;Minor;Error;Nothing",
                            Points = 1,
                            Question = "What will the following code print?\n\nint age = 16;\nif (age >= 18) {\n Console.WriteLine(\"Adult\");\n} else {\n Console.WriteLine(\"Minor\");\n}",
                            QuizContentId = 10
                        },
                        new
                        {
                            Id = 8,
                            CorrectOptionIndex = 1,
                            Options = "=;==;===;!=",
                            Points = 1,
                            Question = "Which operator is used for comparison in conditions?",
                            QuizContentId = 10
                        },
                        new
                        {
                            Id = 9,
                            CorrectOptionIndex = 0,
                            Options = "0 1 2;1 2 3;0 1 2 3;1 2",
                            Points = 1,
                            Question = "What is the output of this loop?\n\nfor (int i = 0; i < 3; i++) {\n Console.WriteLine(i);\n}",
                            QuizContentId = 11
                        },
                        new
                        {
                            Id = 10,
                            CorrectOptionIndex = 2,
                            Options = "Initialization;Condition;Update;Break",
                            Points = 1,
                            Question = "Which part of the 'for' loop runs after each iteration?",
                            QuizContentId = 11
                        },
                        new
                        {
                            Id = 11,
                            CorrectOptionIndex = 0,
                            Options = "for (;;);for (int i = 0; i < 1; i++);for (int i = 0; i < 10; i++);for (int i = 10; i > 0; i--)",
                            Points = 1,
                            Question = "Which of the following creates an infinite loop?",
                            QuizContentId = 11
                        });
                });

            modelBuilder.Entity("EduGate.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "studentA@edugate.com",
                            Name = "Student A",
                            Password = "password789"
                        },
                        new
                        {
                            Id = 2,
                            Email = "studentB@edugate.com",
                            Name = "Student B",
                            Password = "password012"
                        });
                });

            modelBuilder.Entity("EduGate.Models.StudentCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("EduGate.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@edugate.com",
                            Name = "John Doe",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@edugate.com",
                            Name = "Jane Smith",
                            Password = "password456"
                        },
                        new
                        {
                            Id = 3,
                            Email = "ray.hansen@edugate.com",
                            Name = "Ray Hansen",
                            Password = "password456"
                        });
                });

            modelBuilder.Entity("EduGate.Models.QuizContent", b =>
                {
                    b.HasBaseType("EduGate.Models.ModuleContent");

                    b.Property<int?>("MaxAttempts")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Quiz");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            ContentType = "Quiz",
                            ModuleId = 1,
                            Order = 2,
                            ShortDescription = "Test your understanding of general programming fundamentals.",
                            Title = "Programming Basics Quiz",
                            PassingScore = 70
                        },
                        new
                        {
                            Id = 8,
                            ContentType = "Quiz",
                            ModuleId = 2,
                            Order = 2,
                            ShortDescription = "Evaluate your knowledge of machine learning fundamentals.",
                            Title = "Machine Learning Concepts Quiz",
                            PassingScore = 70
                        },
                        new
                        {
                            Id = 9,
                            ContentType = "Quiz",
                            ModuleId = 3,
                            Order = 3,
                            ShortDescription = "Check your knowledge of variable types, naming, and usage in C#.",
                            Title = "C# Variables Quiz",
                            PassingScore = 50
                        },
                        new
                        {
                            Id = 10,
                            ContentType = "Quiz",
                            ModuleId = 4,
                            Order = 3,
                            ShortDescription = "Assess your understanding of conditional statements in C#.",
                            Title = "C# Conditions Quiz",
                            PassingScore = 50
                        },
                        new
                        {
                            Id = 11,
                            ContentType = "Quiz",
                            ModuleId = 5,
                            Order = 3,
                            ShortDescription = "Test how well you understand looping mechanisms like 'for' loops in C#.",
                            Title = "C# Loops Quiz",
                            PassingScore = 50
                        });
                });

            modelBuilder.Entity("EduGate.Models.TextContent", b =>
                {
                    b.HasBaseType("EduGate.Models.ModuleContent");

                    b.Property<string>("TextLocation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasDiscriminator().HasValue("Text");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            ContentType = "Text",
                            ModuleId = 3,
                            Order = 1,
                            ShortDescription = "Detailed text explanation on declaring and using variables in C#.",
                            Title = "C# variables explanation",
                            TextLocation = "~/contents/txt/IntroToCSharp/CSharpVariables.txt"
                        },
                        new
                        {
                            Id = 5,
                            ContentType = "Text",
                            ModuleId = 4,
                            Order = 1,
                            ShortDescription = "Learn the syntax and logic behind if conditions in C#.",
                            Title = "C# if conditions explanation",
                            TextLocation = "~/contents/txt/IntroToCSharp/CSharpIfStatement.txt"
                        },
                        new
                        {
                            Id = 6,
                            ContentType = "Text",
                            ModuleId = 5,
                            Order = 1,
                            ShortDescription = "Read how for loops function in C# and how to implement them.",
                            Title = "C# for loops explanation",
                            TextLocation = "~/contents/txt/IntroToCSharp/CSharpForLoops.txt"
                        });
                });

            modelBuilder.Entity("EduGate.Models.VideoContent", b =>
                {
                    b.HasBaseType("EduGate.Models.ModuleContent");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<string>("VideoLocation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasDiscriminator().HasValue("Video");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentType = "Video",
                            ModuleId = 3,
                            Order = 2,
                            ShortDescription = "Watch this video to understand how variables work in C#.",
                            Title = "C# variables explanation",
                            VideoLocation = "~/contents/vid/IntroToCSharp/CSharpVariables.mp4"
                        },
                        new
                        {
                            Id = 2,
                            ContentType = "Video",
                            ModuleId = 4,
                            Order = 2,
                            ShortDescription = "This video explains how to use if, else if, and else statements in C#.",
                            Title = "C# if conditions explanation",
                            VideoLocation = "~/contents/vid/IntroToCSharp/CSharpIfStatement.mp4"
                        },
                        new
                        {
                            Id = 3,
                            ContentType = "Video",
                            ModuleId = 5,
                            Order = 2,
                            ShortDescription = "Understand how to use for loops in C# with practical examples.",
                            Title = "C# for loops explanation",
                            VideoLocation = "~/contents/vid/IntroToCSharp/CSharpForLoops.mp4"
                        });
                });

            modelBuilder.Entity("EduGate.Models.ContentProgress", b =>
                {
                    b.HasOne("EduGate.Models.ModuleContent", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduGate.Models.Student", "Student")
                        .WithMany("ContentProgresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduGate.Models.Course", b =>
                {
                    b.HasOne("EduGate.Models.Teacher", "Teacher")
                        .WithMany("UploadedCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EduGate.Models.CourseReview", b =>
                {
                    b.HasOne("EduGate.Models.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduGate.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduGate.Models.Module", b =>
                {
                    b.HasOne("EduGate.Models.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduGate.Models.ModuleContent", b =>
                {
                    b.HasOne("EduGate.Models.Module", "Module")
                        .WithMany("Contents")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("EduGate.Models.QuizQuestion", b =>
                {
                    b.HasOne("EduGate.Models.QuizContent", "QuizContent")
                        .WithMany("Questions")
                        .HasForeignKey("QuizContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizContent");
                });

            modelBuilder.Entity("EduGate.Models.StudentCourse", b =>
                {
                    b.HasOne("EduGate.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduGate.Models.Student", "Student")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduGate.Models.Course", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("EduGate.Models.Module", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("EduGate.Models.Student", b =>
                {
                    b.Navigation("ContentProgresses");

                    b.Navigation("EnrolledCourses");
                });

            modelBuilder.Entity("EduGate.Models.Teacher", b =>
                {
                    b.Navigation("UploadedCourses");
                });

            modelBuilder.Entity("EduGate.Models.QuizContent", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
